{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyOOS88iTHD1VyyuEs0MJHdA",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Y-ME-tho/mnist/blob/main/mnist%20accuracy%20vs%20epoch\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!wget https://github.com/myleott/mnist_png/blob/master/mnist_png.tar.gz?raw=true -O mnist_png.tar.gz\n",
        "\n",
        "!tar -xvzf mnist_png.tar.gz\n",
        "\n",
        "import os\n",
        "print(\"Extracted directories:\", os.listdir('mnist_png'))\n",
        "print(\"Training subdirectories:\", os.listdir('mnist_png/training'))\n",
        "print(\"Testing subdirectories:\", os.listdir('mnist_png/testing'))\n"
      ],
      "metadata": {
        "collapsed": true,
        "id": "9VORAJdSDN_M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cRyro6VXCLHi",
        "outputId": "36fa6c44-28a2-476d-db57-5dae75921980"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using device: cuda\n",
            "Epoch [1/10] Train Accuracy: 92.71% | Val Accuracy: 96.04%\n",
            "Epoch [2/10] Train Accuracy: 96.72% | Val Accuracy: 96.92%\n",
            "Epoch [3/10] Train Accuracy: 97.52% | Val Accuracy: 97.24%\n",
            "Epoch [4/10] Train Accuracy: 98.05% | Val Accuracy: 96.79%\n",
            "Epoch [5/10] Train Accuracy: 98.38% | Val Accuracy: 97.60%\n",
            "Epoch [6/10] Train Accuracy: 98.68% | Val Accuracy: 97.36%\n",
            "Epoch [7/10] Train Accuracy: 98.69% | Val Accuracy: 97.91%\n",
            "Epoch [8/10] Train Accuracy: 98.97% | Val Accuracy: 97.48%\n",
            "Epoch [9/10] Train Accuracy: 99.01% | Val Accuracy: 97.71%\n",
            "Epoch [10/10] Train Accuracy: 99.22% | Val Accuracy: 97.96%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "from torch.utils.data import DataLoader\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def get_device():\n",
        "    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "    print(f\"Using device: {device}\")\n",
        "    return device\n",
        "\n",
        "def get_transforms():\n",
        "    return transforms.Compose([\n",
        "        transforms.Grayscale(num_output_channels=1),\n",
        "        transforms.Resize((28, 28)),\n",
        "        transforms.ToTensor(),\n",
        "        transforms.Normalize((0.1307,), (0.3081,))\n",
        "    ])\n",
        "\n",
        "def get_datasets(train_dir, test_dir, transform):\n",
        "    train_dataset = torchvision.datasets.ImageFolder(root=train_dir, transform=transform)\n",
        "    test_dataset = torchvision.datasets.ImageFolder(root=test_dir, transform=transform)\n",
        "    return train_dataset, test_dataset\n",
        "\n",
        "def get_dataloaders(train_dataset, test_dataset, batch_size=32):\n",
        "    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
        "    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n",
        "    return train_loader, test_loader\n",
        "\n",
        "class MNISTNet(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(MNISTNet, self).__init__()\n",
        "        self.flatten = nn.Flatten()\n",
        "        self.fc1 = nn.Linear(28*28, 128)\n",
        "        self.fc2 = nn.Linear(128, 64)\n",
        "        self.fc3 = nn.Linear(64, 10)\n",
        "        self.relu = nn.ReLU()\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.flatten(x)\n",
        "        x = self.relu(self.fc1(x))\n",
        "        x = self.relu(self.fc2(x))\n",
        "        return self.fc3(x)\n",
        "\n",
        "def train_one_epoch(model, train_loader, criterion, optimizer, device):\n",
        "    model.train()\n",
        "    correct_train = 0\n",
        "    total_train = 0\n",
        "\n",
        "    for images, labels in train_loader:\n",
        "        images, labels = images.to(device), labels.to(device)\n",
        "\n",
        "        outputs = model(images)\n",
        "        loss = criterion(outputs, labels)\n",
        "\n",
        "        optimizer.zero_grad()\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        _, predicted = torch.max(outputs, 1)\n",
        "        total_train += labels.size(0)\n",
        "        correct_train += (predicted == labels).sum().item()\n",
        "\n",
        "    train_acc = 100.0 * correct_train / total_train\n",
        "    return train_acc\n",
        "\n",
        "def evaluate(model, test_loader, device):\n",
        "    model.eval()\n",
        "    correct_val = 0\n",
        "    total_val = 0\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for images, labels in test_loader:\n",
        "            images, labels = images.to(device), labels.to(device)\n",
        "            outputs = model(images)\n",
        "\n",
        "            _, predicted = torch.max(outputs, 1)\n",
        "            total_val += labels.size(0)\n",
        "            correct_val += (predicted == labels).sum().item()\n",
        "\n",
        "    val_acc = 100.0 * correct_val / total_val\n",
        "    return val_acc\n",
        "\n",
        "def plot_accuracies(train_accuracies, val_accuracies, num_epochs):\n",
        "    plt.figure(figsize=(8,5))\n",
        "    epochs_range = range(1, num_epochs + 1)\n",
        "    plt.plot(epochs_range, train_accuracies, label='Train Accuracy', marker='o')\n",
        "    plt.plot(epochs_range, val_accuracies, label='Val Accuracy', marker='o')\n",
        "    plt.title('Accuracy vs. Epochs')\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.ylabel('Accuracy (%)')\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    plt.show()\n",
        "\n",
        "def main():\n",
        "    device = get_device()\n",
        "\n",
        "    train_dir = 'mnist_png/training'\n",
        "    test_dir = 'mnist_png/testing'\n",
        "\n",
        "    transform = get_transforms()\n",
        "    train_dataset, test_dataset = get_datasets(train_dir, test_dir, transform)\n",
        "    batch_size = 32\n",
        "    train_loader, test_loader = get_dataloaders(train_dataset, test_dataset, batch_size)\n",
        "\n",
        "    model = MNISTNet().to(device)\n",
        "    criterion = nn.CrossEntropyLoss()\n",
        "    optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
        "\n",
        "    num_epochs = 10\n",
        "    train_accuracies = []\n",
        "    val_accuracies = []\n",
        "\n",
        "    for epoch in range(num_epochs):\n",
        "        train_acc = train_one_epoch(model, train_loader, criterion, optimizer, device)\n",
        "        val_acc = evaluate(model, test_loader, device)\n",
        "\n",
        "        train_accuracies.append(train_acc)\n",
        "        val_accuracies.append(val_acc)\n",
        "\n",
        "        print(f\"Epoch [{epoch+1}/{num_epochs}] \"\n",
        "              f\"Train Accuracy: {train_acc:.2f}% | Val Accuracy: {val_acc:.2f}%\")\n",
        "\n",
        "    plot_accuracies(train_accuracies, val_accuracies, num_epochs)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "ewLrW8mmDO7X"
      }
    }
  ]
}